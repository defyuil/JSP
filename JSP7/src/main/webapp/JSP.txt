JSP.txt

정적데이터 : HTML,CSS,JS,IMG
동적데이터 : JSP(JAVA)

   C#  ASP.Net
   C   PHP
   JAVA  JSP
   
   
   JSP => Java Server Page
    (Java(서블릿) + html)
    
  
  * JSP 지시어(Directive) p150~
    : JSP 페이지에서 실행할때 필요한 정보(설정) 작성하는 공간
      page 지시어,include 지시어,taglib 지시어
      
    <%@ 내용   %>
  
  * JSP 스크립트요소(문법)
   1) JSP 선언문(Declaration) p160~
      멤버변수/멤버메서드 선언할때 사용
      
      <%!   
      		int a;  //멤버 변수
      		public void method(){
      		   // 멤버 메서드
      		}      
       %>
      
   2) JSP 스크립틀릿(Scriptlet) p162~
      HTML 페이지에서 JAVA코드를 사용하기위해서 
      
      <%
         실행문;
         int 변수; // 지역변수
      %>
   
   3) JSP 표현식 (Expression)   
     HTML코드에 정보(JSP) 출력
     
     <%=변수/값 %>
     <%=메서드(리턴O) / 수식 %>
  
  
 /******************************************************************/
  Java - Class(클래스)
  
  class 클래스명{
  	 int 변수명;  // 멤버변수(전역변수)
  	 int itwill;
  	 
  	 public void 메서드명(){ // 멤버메서드
  	 	 int 변수; // 지역변수
  	 	 int busan;
  	 	 print(itwill);
  	 	 print(busan);
  	 	 
  	 	 표현식(itwill);
  	 	 표현식(busan);
  	 	 
  	 }  
  } 
  
 /******************************************************************/ 
  
  
  액션태그 : jsp 페이지에서만 사용가능
    => HTML 태그형태로 JSP의 동작을 수행가능하게 하는 태그
       (정적)          (동적)
  
       
  <%@ include %> (include 지시어)
   => 페이지 내부에 속성(값)을 추가할때 사용
   => 페이지를 컴파일하기전에 소스코드를 include후 컴파일해서 사용한다.
       
  <jsp:include/> (include 액션태그)
   => 공통적인 페이지를 추가할때 사용
     (페이지의 제어권 넘겨서 사용)
   => 페이지를 컴파일후에 include해서 사용한다.   
   
   
  p177~208 [ JSP 내장객체 ]
  
  javax.servlet패키지 - 8개
  
   request : 클라이언트의 HTTP 요청정보를 저장한 객체
   response : HTTP요청에 대한 처리결과정보를 저장한 객체
   session : 클라이언트의 세션정보를 저장하는 객체 
   pageContext : 페이지를 실행할때 필요한 정보(컨텍스트)를 저장하는 객체 (컨텍스트<=>프로젝트)
   out : 응답페이지 전송을 위한 출력(스트림) 객체 
   application : 애플리케이션의 컨텍스트 정보를 저장하는 객체
   config : 페이지의 서블릿 설정 정보(초기화정보)
   page : 특정 페이지 서블릿 객체 
    
  java.lang패키지 - 1개
   
   exception : 예외처리 객체
   
  
  
  * 영역객체 (p209~)
  
   - 영역(Scope) : 속성을 공유할 수 있는 유효범위
   - 속성(Attribute) : 공유되는 데이터
   
   [영역]				[영역객체]			 [유효범위]
   page					pageContext			 해당페이지
   request				request				 클라이언트 요청이 처리되는 페이지
   session				session				 세션이 유지되는 모든 페이지
   application			application			 서버 실행하는 동안 모든 페이지
   
   * 영역객체 사용
   
   	영역객체.setAttribute("이름",값);
   	영역객체.getAttribute("이름");
     
   
    * 세션(Session) : 서버측에서 관리하는 데이터( 컨테이너의 접속 종료전까지 유지(브라우저종료까지) )
    ** HTTP 프로토콜 통신의 특징 : 상태가 유지 X
    
     [클라이언트]					[서버]
    				 요청(request)
    			  <=			  =>
    				 응답(response)		
    				 
    				 
    * 로그인 + 세션
     => 로그인 유지되고 있음 (세션)
     
     1) 로그인창에 아이디/비밀번호 입력
     2) 로그인정보 처리(admin/1234) 같은지 다른지 비교
     3) 처리로직에 따른 페이지 이동
     3-1) 아이디 O / X
     3-2) 비밀번호 O / X
     4) 정상로그인(아이디O/비밀번호O) -> 메인페이지 이동
        로그인 사용자 아이디를 세션에 저장
         
     
   * 쿠키 (Cookie)
    => HTTP프로토콜 통신을 하는경우 요청에 대한 
    응답을 수행하는 경우 연결을 지속X (상태유지X)
    => 상태를 유지하기 위해서 쿠키사용(커피쿠폰) 	
    => 쿠키는 사용자의 컴퓨터 하드디스크에 저장	(보안에 위험) 
    
    - 이름,값,유효기간,도메인,경로,....으로 구성
    - 정보는 알파벳과 숫자로 구성
    
    * 쿠키(객체) 생성
     Cookie cookie = new Cookie(이름,값);
     
    * 쿠키정보 전달
     response.addCookie(cookie);				 
    				 
    변수 사용 규칙
    1)  변수 선언 
    2)  변수 초기화
    3) 	변수 사용			 
    
    class Cookie{
    	int age; // 멤버변수
    	
    	//public Cookie(){
    	   // 기본 생성자 : 멤버변수를 초기화 => 객체 생성
    	   // age = 0;
    	//}
    	public Cookie(int a,int b){
    	   // 오버로딩 메서드(생성자)
    	   // => 오버로딩된 생성자가 있을경우 
    	   //   기본생성자는 자동 생성 불가
    	}
    
        public int getInt(){
           return age; // 멤버메서드
        }    
    }
    				 
    				 
   P372~  데이터베이스
   
   p428~ JDBC
   				

	http://localhost:8088/JSP7/jdbc/dbConnectTest.jsp
	
	[프로토콜] :// [IP 주소]:[포트번호] / [실행주소]
	
	jdbc:mysql://localhost:3306/jspdb
    				 	  	
	[프로토콜] :// [IP 주소]:[포트번호] / [DB이름]
       
    
    
   
     public void test(int a, int b);
     public void test(int x, int y);

     public void test(int a, int b);
     public int test(int a, int b);
     
     public void test(int a, long b);
     public void test(long a, int b);
     =>  test(100,200);
     =>  test(100L,200);
     
     메서드 시그니처 : 컴파일러가 메서드를 구분하는 요소
     1) 이름
     2) 전달인자의 데이터 타입
     3) 전달인자의 개수
     
     => 메서드 오버로딩 : 동일한 이름의 메서드를 사용
         전달인자의 정보(타입,개수)를 다르게 해서 사용
     
     
     
   package com.itwillbs.ex;
   
   
   com.itwillbs.ex
   www.itwillbs.com
   => 패키지명-회사의 도메인주소 사용
   
   www.itwillbs.com
   => com.itwillbs.~~~~
   www.busan.co.kr
   => kr.co.busan.~~~~~
   
   
   
   p245~ 
   
   자바빈(JavaBean) : 자바객체(+자바빈 규칙을 통해서 만들어진)
   
   규약
   1. 특정 패키지에 포함되어야함(default패키지X)
   2. 기본 생성자가 있어야함
   3. 멤버변수는 private접근제어자 사용
   4. 멤버변수에 접근가능한  get/set 메서드 필요
   5. get/set 메서드는 public 접근제어자 사용
    
   
   
   회원관리 시스템(member)
   
   회원가입 - 사용자 정보 입력
   			- 사용자 정보를 처리(DB에 저장)
   			
   로그인 - 사용자 계정정보 입력
   		  - 입력정보 사용 본인 확인
  
   로그아웃
   
   메인페이지 - 로그인정보 체크
   
   개인정보 조회
   
   개인정보 수정
   
   개인정보 삭제(탈퇴)
   
   관리자 - 회원 목록리스트
   
   
   
   -------------------------------------------------------------
   board - 게시판 
   
   게시판 글 작성
   
   게시판 리스트 
   (+ 페이징 처리)
   
   게시판 글 본문 보기
   
   게시판 글 수정
   
   게시판 글 삭제
   
   + 게시판 답글 쓰기
   + 게시판 첨부파일 업로드/다운로드
   
   
   CREATE TABLE `jspdb`.`itwill_board` (
  `bno` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `pass` VARCHAR(45) NOT NULL,
  `subject` VARCHAR(100) NOT NULL,
  `content` VARCHAR(2000) NULL,
  `readcount` INT NULL,
  `re_ref` INT NULL,
  `re_lev` INT NULL,
  `re_seq` INT NULL,
  `date` DATE NULL,
  `ip` VARCHAR(45) NULL,
  `file` VARCHAR(200) NULL,
  PRIMARY KEY (`bno`));
   
   
   
   * 예외 처리 : 예상하지 못한 예외상황을 처리구문
             => 주로 외부 시스템과의 연결,IO,...
             => 예외가 발생하면 예외객체를 생성, catch에게 던진다 
                받은 예외객체를 확인후 처리  
   
   * 자바에서는 예외상황을 '객체'로 표시함
   
    코드1;
   	try {		
		Class.forName(DRIVER);
		// 에러 발생!!!!! -> 모든 코드 실행 X
		Class.forName(DRIVER2);		
	} catch (ClassNotFoundException e) {
		e.printStackTrace();
	}
    코드2;
   
   
   
   try{
   		예외가 발생 할지도 모르는 코드
   }catch(Exception e){
        예외 처리(에러메세지 출력)
   }finally{
        예외 발생여부와 상관없이 무조건 실행
   }
   
  
  * 배열 
   (기본형타입-8)
   int[] arr = new int[10];
   (참조형타입)
   => 객체배열
   String[] arr2 = new String[10];
   BoardBean[] arr3 = new BoardBean[10];
   
   1) 객체배열은 객체를 생성(X)
   BoardBean bb = new BoardBean();
   BoardBean bb = new BoardBean();
	....
   BoardBean bb = new BoardBean();  X10
	
   2) 객체배열은 객체 레퍼런스 생성(O)
   BoardBean bb;
   BoardBean bb;
    ....
   BoardBean bb;  X10
   
   => arr3[0] = new BoardBean();
      arr3[0].setAAA(100);
   
   ==> 고정길이 배열
   ==> 가변길이 배열
       ArrayList 객체 : 데이터의 개수에 따라 배열의 길이가 변경됨
       
       객체 생성
       ArrayList arr = new ArrayList();
       
       요소값 추가
       arr[0] = 값; (x)
       arr.add(값); (o)
       
       요소값 사용
       arr.get(인덱스);
   
   
   
   * 답글 처리 로직
   
   re_ref : 답글의 그룹번호( 원글과 답글이 모두 동일한 값을 가지도록하는 값)
           
           일반글 - 글번호와 같음  (bno == re_ref)
           답글 - 원글의 ref값을 저장
               
   re_lev : 답글의 레벨값 ( 답글을 들여쓰기 하는 값 )
   
   		   일반글 - 항상 0 초기화
   		   답글 - 원글의 lev + 1 저장
   
   re_seq : 답글의 순서값 ( 답글을 정렬할때 순서값 ) 
   		
   			일반글 - 항상 0 초기화
   			답글 - 원글의 seq + 1 저장
   			
   
   ----------------------------------------------------------			
   bno	subject			re_ref	re_lev	re_seq
   ----------------------------------------------------------			
   1	일반1			1		0		0
   2	일반2			2		0		0
   3	일반3			3		0		0		
   4	>답글1-1		1		1		1
   5	>답글3-1		3		1		1
   6	일반4			6		0		0
   7	>>답글1-1-1		1		2		2
   8	>>>답글1-1-1-1	1		3		3	
   9	>>답글3-1-1		3		2		2	
   10	>답4-1			6		1		1
   
   
   order by bno desc  
   => order by re_ref desc(내림차순), re_seq asc(오름차순)
   => re_seq 값이 기존의 값(원글의 seq)보다 
      큰값이 존재하는 경우 기존의 seq값 + 1 계산  
   ----------------------------------------------------------			
   bno	subject			re_ref	re_lev	re_seq
   ----------------------------------------------------------			
   3	일반3			3		0		0
   2	일반2			2		0		0
   5	>답2-1			2		1		1
   6	>>답2-1-1		2		2		2
   1	일반1			1		0		0
   9	>답1-4			1  		1		1
   8	>답1-3			1		1		2(1+1)
   10	>>답1-3-1		1		2		3
   7	>답1-2			1		1		4(3+1)
   4	>답1-1			1		1		5(4+1)
   		  
   
   
   
   
      
       MultipartRequest multi 
	         = new MultipartRequest(
	        		 request,  (폼태그 전달정보)
	        		 realPath, (실제 파일이 저장되는 장소) 
	        		 maxSize,  (파일크기 제한)
	        		 "UTF-8",  (한글처리 인코딩)
	        		 new DefaultFileRenamePolicy() (파일이름 중복 처리객체)
	        		 );
	      => 객체 생성 == 파일업로드  		 
   
  * 서블릿(Servlet)
     JSP(Java Server Page): 클라이언트의 요청을 처리해서 동적인 데이터(DB)를 사용가능하도록 만들어주는 기술  
     Servlet (Server Side Applet):자바코드로 동적데이터를 처리하는 기술
     
     JSP <=> Servlet(java) <=> class
        [실행]			   [컴파일]
   ** 서블릿의 경우는 코드하나 공백하나 변경할때마다 컴파일이 필요,
      JSP(HTML+java) 매번 컴파일 X
      
  * 서블릿 사용 규칙
   1) javax.servlet.Servlet 인터페이스를 구현
   2) 1)을 구현하기 힘든경우, javax.servlet.http.HttpServlet 클래스를 상속 사용    
   3) doGet(),doPost() 메서드를 선언(오버라이딩)   
      (javax.servlet.http.HttpServletRequest,
      javax.servlet.http.HttpServletResponse 전달인자 필수로 구현)
   4) java.io.IOException,javax.servlet.ServletException을 통한 예외 처리(예외던기지)
   5) 배포서술자(web.xml)를 사용해서 서블릿과 주소(url)을 매핑 
     (서블릿3.0~이상은 어노테이션 지원)  
   
   
     
     <!-- web.xml (배포서술자) 서블릿을 매핑한다 -->
   서블릿 클래스 정보저장
  <servlet>
  	<servlet-name> 서블릿 객체이름 </servlet-name>
  	<servlet-class> 서블릿 클래스의 위치 </servlet-class>	
  </servlet>
   서블릿 클래스와 url주소를 매핑
  <servlet-mapping>
  	<servlet-name> 서블릿 객체이름 </servlet-name>
  	<url-pattern> url주소 </url-pattern>
  </servlet-mapping>
  
  
  * JSP -> Servlet 변경 (자동변경)
   - JSP페이지를 실행할때(컴파일) Servlet으로 변경
   - JSP 스크립틀릿(<%  %>)코드는 Servlet-service() 메서드 안에 작성
   - JSP 선언문 (<%! %>)코드는 Servlet안에 멤버(변수,메서드)의 형태로 작성
   - JSP 표현식 (<%= %>)코드는 Servlet-service() 메서드, out.println()로 변경
   - HTML 코드는 Servlet-service() 메서드, out.write()로 변경
   
   
   * EL(Expression Language) : 표현(식) 언어
    =>
       사용목적
       - 간편한 출력 
       - out.pritln(), <%= %>을 대신하기위한 표현법
      
       사용방법
         ${변수  }  ${식(연산)} ${메서드 호출(단,리턴이 있는경우)}
         
       - EL 내장객체 (p513)
         pageScope / requestScope / sessionScope / applicationScope
         param / paramValues
         header / headerValues
         cookie
         initParam
         pageContext          
         
       - EL 연산자  (p516~517)
         산술연산자 ( + - * / % )
         논리연산자 ( && || ! )
         비교연산자 ( == != > < >= <=)
         ( .  []  ()  X? a:b  empty )  
       
    
   * JSTL (JSP Standard Tag Library)  (p519-526)
   => 자카르타(아파치) 제공하는 자주 사용되는 태그를 기능별로 모아놓은 라이브러리
   
    - CORE 라이브러리 : 기본적인 기능
               변수생성, 출력, 조건문, 반복문.....
    - Formmatting 라이브러리 : 형태를 처리하는 기능(숫자,날짜시간)            
    
    
      
    
   
  
  
   
   
   
   
   
   